{"version":3,"sources":["webpack://AAC/./src/static/js/scripts/widget-system/widget-react-components/dynamic-components/WidgetButton.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAA+B;AACmB;AAalD,MAAM,YAAa,SAAQ,4CAAoD;IAC9E,YAAY,KAAK;QAChB,KAAK,CAAC,KAAK,CAAC,CAAC;QASd,gBAAW,GAAG,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,QAAQ,CAAC;gBACb,YAAY,EAAG,IAAI;aACnB,CAAC;YAEF,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC7D,IAAI,CAAC,QAAQ,CAAC;oBACb,YAAY,EAAG,KAAK;iBACpB,CAAC;YACH,CAAC,CAAC;YAEF,KAAK,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAnBA,IAAI,CAAC,KAAK,GAAG;YACZ,YAAY,EAAG,KAAK;SACpB;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAgBD,MAAM;QACL,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC3C,iDAAC,oDAAO,IACF,EAAE,EAAC,MAAM,EACT,SAAS,EAAC,QAAQ,EAClB,IAAI,EAAC,IAAI,EACT,IAAI,EAAC,QAAQ,iBACD,MAAM,GACtB,CAAC,CAAC,CAAC,0DAAK,KAAK,EAAC,4BAA4B,EAAC,KAAK,EAAC,MAAM,EAAC,MAAM,EAAC,MAAM,EAAC,IAAI,EAAC,cAAc,EAAC,SAAS,EAAC,4BAA4B,EAAC,OAAO,EAAC,WAAW;YACnJ,2DAAM,CAAC,EAAC,kKAAkK,GAAE,CACxK,CAAC;QACR,OAAO,CACN,0DAAK,SAAS,EAAC,aAAa;YAC3B,iDAAC,oDAAM,IAAC,OAAO,EAAC,MAAM,EAAC,IAAI,EAAC,IAAI,EAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,IAC7H,WAAW,CACJ,CACJ,CACN;IACF,CAAC;CACD;AAED,iEAAe,YAAY,EAAC","file":"./dist/src_static_js_scripts_widget-system_widget-react-components_dynamic-components_WidgetButton_tsx.bundle.js","sourcesContent":["import * as React from \"react\";\r\nimport { Button, Spinner } from 'react-bootstrap';\r\nimport * as Structs from \"../../widget-structures/widget-structure\";\r\n\r\ninterface WidgetButtonProps {\r\n\tstructure : Structs.WidgetStructure;\r\n\tupdateDynamicComponents;\r\n\tgetDynamicComponents;\r\n}\r\n\r\ninterface WidgetButtonState {\r\n\tisProcessing : boolean;\r\n}\r\n\r\nclass WidgetButton extends React.Component<WidgetButtonProps,WidgetButtonState> {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tisProcessing : false\r\n\t\t}\r\n\r\n\t\tthis.handlePress = this.handlePress.bind(this);\r\n\t}\r\n\r\n\thandlePress = event => {\r\n\t\tthis.setState({\r\n\t\t\tisProcessing : true\r\n\t\t})\r\n\r\n\t\tnew Promise((resolve) => setTimeout(resolve, 2000)).then(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tisProcessing : false\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tevent.preventDefault();\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet buttonValue = this.state.isProcessing ? \r\n\t\t<Spinner\r\n\t\t      as=\"span\"\r\n\t\t      animation=\"border\"\r\n\t\t      size=\"lg\"\r\n\t\t      role=\"status\"\r\n\t\t      aria-hidden=\"true\"\r\n\t\t/> : <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"3rem\" height=\"3rem\" fill=\"currentColor\" className=\"bi bi-arrow-up-circle-fill\" viewBox=\"0 0 16 16\">\r\n\t\t\t  <path d=\"M16 8A8 8 0 1 0 0 8a8 8 0 0 0 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z\"/>\r\n\t\t\t</svg>;\r\n\t\treturn ( \r\n\t\t\t<div className=\"text-center\">\r\n\t\t\t\t<Button variant=\"info\" size='lg' disabled={this.state.isProcessing} onClick={!this.state.isProcessing ? this.handlePress : null}>\r\n\t\t\t\t\t{buttonValue}\r\n\t\t\t\t</Button>\r\n\t\t\t</div> \r\n\t\t)\r\n\t}\r\n} \r\n\r\nexport default WidgetButton;"],"sourceRoot":""}